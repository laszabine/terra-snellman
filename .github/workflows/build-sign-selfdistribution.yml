name: build & sign & publish
on:
  push:
    branches:
      - master
jobs:
  compare-version:
    name: Compare version
    runs-on: ubuntu-latest
    outputs:
      versionNumber: ${{ steps.read-committed-version.outputs.versionNumber }}
      versionString: ${{ steps.read-committed-version.outputs.versionString }}
      isDifferent: ${{ steps.compare-version.outputs.isDifferent }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Open committed manifest"
        id: open-committed-manifest
        uses: juliangruber/read-file-action@v1
        with:
          path: "./manifest.json"

      - name: "Read committed version"
        id: read-committed-version
        env:
          VERSION: ${{ fromJson(steps.open-committed-manifest.outputs.content).version }}
        run: |
          echo "::set-output name=versionNumber::$VERSION"
          echo "::set-output name=versionString::v$VERSION"

      - name: "Read latest release version"
        id: read-latest-release-version
        uses: oprypin/find-latest-tag@v1
        with:
          repository: ${{ github.repository }}

      - name: "Compare version"
        id: compare-version
        env:
          newVersion: ${{ steps.read-committed-version.outputs.versionString }}
          oldVersion: ${{ steps.read-latest-release-version.outputs.tag }}
        run: |
          echo "Committed version is ${newVersion}, latest release version is ${oldVersion}"
          if [ ${newVersion} = ${oldVersion} ]; then
            echo "They are identical"
            echo "::set-output name=isDifferent::0"
          else
            echo "They are different"
            echo "::set-output name=isDifferent::1"
          fi

  publish-to-github:
    name: Publish to Github
    needs: compare-version
    if: ${{ needs.compare-version.outputs.isDifferent == 1 }}
    outputs:
      pathXPI: ${{ steps.download-path.outputs.pathXPI }}
      pathRelease: ${{ steps.create-release.outputs.url }}
      version: ${{ needs.compare-version.outputs.versionNumber }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: "Build"
        id: web-ext-build
        uses: kewisch/action-web-ext@v1
        with:
          cmd: build
          source: .

      - name: "Sign"
        id: web-ext-sign
        uses: chenxian352/action-web-ext@0c9c361e53ed3f493bc8af8a1b1a9087a3bc7489
        with:
          cmd: sign
          source: ${{ steps.web-ext-build.outputs.target }}
          channel: unlisted
          apiKey: ${{ secrets.MOZILLA_API_SABINE_USER }}
          apiSecret: ${{ secrets.MOZILLA_API_SABINE_SECRET }}
          timeout: 600000 # 10 minutes

      - name: "Create Release"
        id: create-release
        if: steps.web-ext-sign.conclusion == 'success' # must use single quotes for string literals
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.web-ext-sign.outputs.target }}
          tag_name: ${{ needs.compare-version.outputs.versionString }}
          name: Release ${{ needs.compare-version.outputs.versionString }}

      - name: "Get download path"
        id: download-path
        env:
          LOCALPATH: ${{ steps.web-ext-sign.outputs.target }}
          PART1: 'https://github.com/'
          PART2: ${{ github.repository }}/
          PART3: 'releases/download/'
          PART4: ${{ needs.compare-version.outputs.versionString }}/
        run: |
          PART5=${LOCALPATH##*/}
          echo "::set-output name=pathXPI::$PART1$PART2$PART3$PART4$PART5"

  commit-path-to-updates:
    name: Commit path for update
    needs: publish-to-github
    if: ${{ needs.publish-to-github.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Modify updates.json"
        env:
          JSONPATH: './updates.json'
          XPIVERSION: ${{ needs.publish-to-github.outputs.version }}
          XPIPATH: ${{ needs.publish-to-github.outputs.pathXPI }}
          ADDONID: '{212d2e80-11e9-4876-a063-b544b093bb47}'
          RELEASEPATH: ${{ needs.publish-to-github.outputs.pathRelease }}
        run: |
          jq --raw-output \
          --arg ADDONID "${ADDONID}" \
          --arg XPIVERSION ${XPIVERSION} \
          --arg XPIPATH ${XPIPATH} \
          --arg RELEASEPATH ${RELEASEPATH} \
          '.addons[$ADDONID].updates += [{"version": $XPIVERSION, "update_link": $XPIPATH, "update_info_url": $RELEASEPATH }]' \
          ${JSONPATH} > tmp.json
          rm ${JSONPATH}
          mv tmp.json ${JSONPATH}

      - name: "Commit"
        run: |
          git add ./updates.json
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action ðŸ¤–"
          git commit -m "Auto-commit: make XPI path available to updates"

      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
